package mocks

import (
	"github.com/vjftw/orchestrate/commander/domain/user"

	"github.com/stretchr/testify/mock"
	"github.com/vjftw/orchestrate/commander/domain/cadetGroup"
	"github.com/vjftw/orchestrate/commander/domain/project"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *Manager) Delete(_a0 *cadetGroup.CadetGroup) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cadetGroup.CadetGroup) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByKey provides a mock function with given fields: _a0
func (_m *Manager) FindByKey(_a0 string) (*cadetGroup.CadetGroup, error) {
	ret := _m.Called(_a0)

	var r0 *cadetGroup.CadetGroup
	if rf, ok := ret.Get(0).(func(string) *cadetGroup.CadetGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cadetGroup.CadetGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserAndProjectUUID provides a mock function with given fields: _a0, _a1
func (_m *Manager) FindByUserAndProjectUUID(_a0 *user.User, _a1 string) *[]cadetGroup.CadetGroup {
	ret := _m.Called(_a0, _a1)

	var r0 *[]cadetGroup.CadetGroup
	if rf, ok := ret.Get(0).(func(*user.User, string) *[]cadetGroup.CadetGroup); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]cadetGroup.CadetGroup)
		}
	}

	return r0
}

// NewForProject provides a mock function with given fields: _a0
func (_m *Manager) NewForProject(_a0 *project.Project) *cadetGroup.CadetGroup {
	ret := _m.Called(_a0)

	var r0 *cadetGroup.CadetGroup
	if rf, ok := ret.Get(0).(func(*project.Project) *cadetGroup.CadetGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cadetGroup.CadetGroup)
		}
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *Manager) Save(_a0 *cadetGroup.CadetGroup) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cadetGroup.CadetGroup) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
