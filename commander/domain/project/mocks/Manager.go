package mocks

import (
	"github.com/vjftw/orchestrate/commander/domain/user"

	"github.com/stretchr/testify/mock"
	"github.com/vjftw/orchestrate/commander/domain/project"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *Manager) Delete(_a0 *project.Project) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*project.Project) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByUser provides a mock function with given fields: _a0
func (_m *Manager) FindByUser(_a0 *user.User) *[]project.Project {
	ret := _m.Called(_a0)

	var r0 *[]project.Project
	if rf, ok := ret.Get(0).(func(*user.User) *[]project.Project); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]project.Project)
		}
	}

	return r0
}

// FindByUserAndUUID provides a mock function with given fields: _a0, _a1
func (_m *Manager) FindByUserAndUUID(_a0 *user.User, _a1 string) (*project.Project, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *project.Project
	if rf, ok := ret.Get(0).(func(*user.User, string) *project.Project); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*user.User, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInto provides a mock function with given fields: _a0, _a1, _a2
func (_m *Manager) GetInto(_a0 *project.Project, _a1 interface{}, _a2 ...interface{}) {
	_m.Called(_a0, _a1, _a2)
}

// NewForUser provides a mock function with given fields: _a0
func (_m *Manager) NewForUser(_a0 *user.User) *project.Project {
	ret := _m.Called(_a0)

	var r0 *project.Project
	if rf, ok := ret.Get(0).(func(*user.User) *project.Project); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.Project)
		}
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *Manager) Save(_a0 *project.Project) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*project.Project) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
