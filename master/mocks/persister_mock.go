// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/vjftw/orchestrate/master/persisters (interfaces: Persister)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/vjftw/orchestrate/master/models"
)

// Mock of Persister interface
type MockPersister struct {
	ctrl     *gomock.Controller
	recorder *_MockPersisterRecorder
}

// Recorder for MockPersister (not exported)
type _MockPersisterRecorder struct {
	mock *MockPersister
}

func NewMockPersister(ctrl *gomock.Controller) *MockPersister {
	mock := &MockPersister{ctrl: ctrl}
	mock.recorder = &_MockPersisterRecorder{mock}
	return mock
}

func (_m *MockPersister) EXPECT() *_MockPersisterRecorder {
	return _m.recorder
}

func (_m *MockPersister) Delete(_param0 models.Model) bool {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPersisterRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockPersister) Exists(_param0 models.Model, _param1 interface{}, _param2 ...interface{}) bool {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Exists", _s...)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPersisterRecorder) Exists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exists", _s...)
}

func (_m *MockPersister) FindInto(_param0 models.Model, _param1 interface{}, _param2 ...interface{}) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "FindInto", _s...)
}

func (_mr *_MockPersisterRecorder) FindInto(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindInto", _s...)
}

func (_m *MockPersister) Save(_param0 models.Model) {
	_m.ctrl.Call(_m, "Save", _param0)
}

func (_mr *_MockPersisterRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save", arg0)
}
